import string
def preprocess_text(plaintext):
    plaintext = plaintext.upper()
    plaintext = plaintext.replace(" ", "").replace(",", "").replace(".", "")
    plaintext = plaintext.replace("J", "I")
    return plaintext
def generate_playfair_table(key):
    key = key.upper().replace(" ", "")
    key = "".join(dict.fromkeys(key))  
    alphabet = "ABCDEFGHIKLMNOPQRSTUVWXYZ"
    key = key + alphabet
    key = "".join(dict.fromkeys(key))
    table = []
    for i in range(5):
        row = key[i*5:(i+1)*5]
        table.append(list(row))
        
    return table
def find_position(table, letter):
    for i, row in enumerate(table):
        if letter in row:
            return (i, row.index(letter))
    return None
def playfair_encrypt(plaintext, key):
    plaintext = preprocess_text(plaintext)
    table = generate_playfair_table(key)
    ciphertext = []
    i = 0
    while i < len(plaintext):
        if i == len(plaintext) - 1:  
            pair = (plaintext[i], 'X')
        elif plaintext[i] == plaintext[i + 1]:   
            pair = (plaintext[i], 'X')
            i -= 1  
        else:
            pair = (plaintext[i], plaintext[i + 1])
        row1, col1 = find_position(table, pair[0])
        row2, col2 = find_position(table, pair[1])
        if row1 == row2:
            ciphertext.append(table[row1][(col1 + 1) % 5])
            ciphertext.append(table[row2][(col2 + 1) % 5])
        elif col1 == col2:
            ciphertext.append(table[(row1 + 1) % 5][col1])
            ciphertext.append(table[(row2 + 1) % 5][col2])
        else:
            ciphertext.append(table[row1][col2])
            ciphertext.append(table[row2][col1])
        
        i += 2  
    return "".join(ciphertext)
if __name__ == "__main__":
    plaintext = "Hide the gold in the tree stump"
    key = "playfair example"
    
    encrypted_text = playfair_encrypt(plaintext, key)
    print(f"Plaintext: {plaintext}")
    print(f"Encrypted text: {encrypted_text}")

